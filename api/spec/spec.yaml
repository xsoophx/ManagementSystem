openapi: "3.0.0"
info:
  version: 1.0.0
  title: Management System API definition

paths:
  /users:
    get:
      responses:
        '200':
          description: Get all users
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
    post:
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Create a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUser'
  /users/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Get a user by ID
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
    put:
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
            description: Update a user by ID
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/User'

  /articles:
    get:
      responses:
        '200':
          description: Get all articles
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Article'
    post:
      operationId: createArticle
      requestBody:
          required: true
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Article'
      responses:
        '201':
          description: Create an article
          content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Article'
  /articles/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Get an article by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
    put:
      operationId: updateArticle
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: Update an article by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'

components:
  schemas:
    User:
      type: object
      x-go-name: UserDto
      required:
          - id
          - created_at
      properties:
          id:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
          first_name:
            type: string
            example: Alice
          last_name:
            type: string
            example: Doe
          email:
            type: string
            example: alice.example@mail.com
          created_at:
             type: string
             format: date-time
    CreateUser:
      type: object
      x-go-name: CreateUserDto
      required:
        - id
        - first_name
        - last_name
        - email
        - created_at
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        first_name:
          type: string
          example: Alice
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: alice.example@mail.com
        created_at:
          type: string
          format: date-time


    Article:
      type: object
      x-go-name: ArticleDto
      required:
          - id
          - title
          - user_id
          - created_at
      properties:
          id:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
          title:
            type: string
            example: "Hello, world!"
          user_id:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
          description:
            type: string
            example: "This is a description of an article"
          created_at:
            type: string
            format: date-time
            example: "2021-01-01T00:00:00Z"
